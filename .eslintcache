[{"D:\\projects\\sr\\src\\index.js":"1","D:\\projects\\sr\\src\\App.js":"2","D:\\projects\\sr\\src\\components\\Navbar.js":"3","D:\\projects\\sr\\src\\components\\Page1.js":"4","D:\\projects\\sr\\src\\scripts\\1\\script.js":"5","D:\\projects\\sr\\src\\components\\Page2.js":"6","D:\\projects\\sr\\src\\scripts\\2\\1.js":"7","D:\\projects\\sr\\src\\components\\Page3.js":"8","D:\\projects\\sr\\src\\scripts\\3\\1.js":"9","D:\\projects\\sr\\src\\scripts\\3\\2.js":"10","D:\\projects\\sr\\src\\components\\Page4.js":"11","D:\\projects\\sr\\src\\scripts\\4\\1.js":"12","D:\\projects\\sr\\src\\scripts\\4\\2.js":"13","D:\\projects\\sr\\src\\components\\Page5.js":"14","D:\\projects\\sr\\src\\scripts\\5\\1.js":"15","D:\\projects\\sr\\src\\scripts\\5\\2.js":"16","D:\\projects\\sr\\src\\components\\Page6.js":"17","D:\\projects\\sr\\src\\scripts\\6\\1.js":"18","D:\\projects\\sr\\src\\scripts\\6\\2.js":"19"},{"size":306,"mtime":1611701738262,"results":"20","hashOfConfig":"21"},{"size":898,"mtime":1611836028560,"results":"22","hashOfConfig":"21"},{"size":1316,"mtime":1611749748410,"results":"23","hashOfConfig":"21"},{"size":4297,"mtime":1611861962551,"results":"24","hashOfConfig":"21"},{"size":5792,"mtime":1611753022098,"results":"25","hashOfConfig":"21"},{"size":2559,"mtime":1611760835701,"results":"26","hashOfConfig":"21"},{"size":4845,"mtime":1611755866668,"results":"27","hashOfConfig":"21"},{"size":2833,"mtime":1611775549294,"results":"28","hashOfConfig":"21"},{"size":1474,"mtime":1611764155180,"results":"29","hashOfConfig":"21"},{"size":5158,"mtime":1611777245947,"results":"30","hashOfConfig":"21"},{"size":2257,"mtime":1611834291265,"results":"31","hashOfConfig":"21"},{"size":1530,"mtime":1611778187453,"results":"32","hashOfConfig":"21"},{"size":1786,"mtime":1611832219735,"results":"33","hashOfConfig":"21"},{"size":2722,"mtime":1611835960129,"results":"34","hashOfConfig":"21"},{"size":2537,"mtime":1611833300875,"results":"35","hashOfConfig":"21"},{"size":1536,"mtime":1611835920080,"results":"36","hashOfConfig":"21"},{"size":4220,"mtime":1611845776250,"results":"37","hashOfConfig":"21"},{"size":1806,"mtime":1611838094339,"results":"38","hashOfConfig":"21"},{"size":2865,"mtime":1611845412406,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"jen6kv",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"42"},"D:\\projects\\sr\\src\\index.js",[],["88","89"],"D:\\projects\\sr\\src\\App.js",[],"D:\\projects\\sr\\src\\components\\Navbar.js",[],"D:\\projects\\sr\\src\\components\\Page1.js",[],"D:\\projects\\sr\\src\\scripts\\1\\script.js",["90"],"class List {\r\n  constructor(data) {\r\n    this._count = 0\r\n    this.first = null\r\n    this.last = null\r\n    if (data != undefined) {\r\n      this.addHead(data)\r\n    }\r\n  }\r\n\r\n  _createNode(data, prev, next) {\r\n    return {\r\n      data: data,\r\n      prev: prev,\r\n      next: next,\r\n    }\r\n  }\r\n\r\n  isEmpty() {\r\n    return this._count === 0\r\n  }\r\n\r\n  getNode(index) {\r\n    if (this.isEmpty()) throw new Error('List is empty!')\r\n    if (index < this._count / 2) {\r\n      let current = this.first\r\n      for (let i = 0; i < index; i++) {\r\n        current = current.next\r\n      }\r\n      return current\r\n    } else {\r\n      let current = this.last\r\n      for (let i = this._count - 1; i > index; i--) {\r\n        current = current.prev\r\n      }\r\n      return current\r\n    }\r\n  }\r\n\r\n  addHead(data) {\r\n    const node = this._createNode(data, null, this.first)\r\n    if (this.isEmpty) this.last = node\r\n    else this.first.prev = node\r\n    this.first = node\r\n    this._count++\r\n    return this\r\n  }\r\n\r\n  addTail(data) {\r\n    const node = this._createNode(data, this.last, null)\r\n    if (this.isEmpty()) this.first = node\r\n    else this.last.next = node\r\n    this.last = node\r\n    this._count++\r\n    return this\r\n  }\r\n\r\n  add(data, index) {\r\n    const currentNode = this.getNode(index)\r\n    const node = this._createNode(data, currentNode, currentNode.next)\r\n    currentNode.next = node\r\n    node.next.prev = node\r\n    this._count++\r\n    return this\r\n  }\r\n\r\n  shift() {\r\n    this.first = this.first.next\r\n    this.first.prev = null\r\n    this._count--\r\n    return this\r\n  }\r\n\r\n  pop() {\r\n    this.last = this.last.prev\r\n    this.last.next = null\r\n    this._count--\r\n    return this\r\n  }\r\n\r\n  remove(index) {\r\n    const node = this.getNode(index)\r\n    node.prev.next = node.next\r\n    node.next.prev = node.prev\r\n    this._count--\r\n    return this\r\n  }\r\n\r\n  toArray() {\r\n    const result = []\r\n    let current = this.first\r\n    while (current) {\r\n      result.push(current.data)\r\n      current = current.next\r\n    }\r\n    return result\r\n  }\r\n\r\n  toArrayTail() {\r\n    return this.toArray().reverse()\r\n  }\r\n\r\n  showNodes() {\r\n    console.log(this.toArray())\r\n  }\r\n\r\n  showNodesTail() {\r\n    console.log(this.toArrayTail())\r\n  }\r\n}\r\n\r\nclass Heap {\r\n  constructor(data) {\r\n    this._arr = []\r\n    if (Array.isArray(data)) this.build(data)\r\n    else if (data) this.add(data)\r\n  }\r\n\r\n  get heapSize() {\r\n    return this._arr.length\r\n  }\r\n\r\n  add(data) {\r\n    this._arr.push(data)\r\n    let i = this.heapSize - 1\r\n    let parent = Math.ceil((i - 1) / 2)\r\n    while (i > 0 && this._arr[parent] < this._arr[i]) {\r\n      let temp = this._arr[i]\r\n      this._arr[i] = this._arr[parent]\r\n      this._arr[parent] = temp\r\n      i = parent\r\n      parent = Math.ceil((i - 1) / 2)\r\n    }\r\n  }\r\n\r\n  heapify(i) {\r\n    let leftChild, rightChild, largestChild\r\n    while (true) {\r\n      leftChild = 2 * i + 1\r\n      rightChild = 2 * i + 2\r\n      largestChild = i\r\n      if (\r\n        leftChild < this.heapSize &&\r\n        this._arr[leftChild] > this._arr[largestChild]\r\n      ) {\r\n        largestChild = leftChild\r\n      }\r\n      if (\r\n        rightChild < this.heapSize &&\r\n        this._arr[rightChild] > this._arr[largestChild]\r\n      ) {\r\n        largestChild = rightChild\r\n      }\r\n      if (largestChild === i) {\r\n        break\r\n      }\r\n\r\n      let temp = this._arr[i]\r\n      this._arr[i] = this._arr[largestChild]\r\n      this._arr[largestChild] = temp\r\n      i = largestChild\r\n    }\r\n  }\r\n\r\n  build(data) {\r\n    this._arr = data\r\n\r\n    for (let i = this.heapSize / 2; i >= 0; i--) {\r\n      this.heapify(i)\r\n    }\r\n  }\r\n\r\n  getMax() {\r\n    let result = this._arr[0]\r\n    this._arr[0] = this._arr[this.heapSize - 1]\r\n    this._arr.pop()\r\n    this.heapify(0)\r\n    return result\r\n  }\r\n\r\n  getHeap() {\r\n    return this._arr\r\n  }\r\n\r\n  showHeap() {\r\n    console.log(this._arr)\r\n  }\r\n}\r\n\r\nclass Students extends List {\r\n  constructor(fio, address, avg, gender, birthday) {\r\n    if (arguments.length > 0) {\r\n      super({\r\n        fio: fio,\r\n        address: address,\r\n        avg: avg,\r\n        gender: gender,\r\n        birthday: birthday,\r\n      })\r\n    } else {\r\n      super()\r\n    }\r\n  }\r\n\r\n  addTail(fio, address, avg, gender, day, month, year) {\r\n    super.addTail({\r\n      fio: fio,\r\n      address: address,\r\n      avg: avg,\r\n      gender: gender,\r\n      birthday: new Date(year, month, day),\r\n    })\r\n  }\r\n}\r\n\r\nfunction byMonth(students) {\r\n  const months = [\r\n    'jan',\r\n    'feb',\r\n    'mar',\r\n    'apr',\r\n    'may',\r\n    'jun',\r\n    'jul',\r\n    'aug',\r\n    'sep',\r\n    'oct',\r\n    'nov',\r\n    'dec',\r\n  ]\r\n  let result = months.map((month) => {\r\n    const result = {\r\n      month: month,\r\n      count: 0,\r\n      toString() {\r\n        return this.count\r\n      },\r\n    }\r\n    return result\r\n  })\r\n  for (let i = 0; i < students._count; i++) {\r\n    result[students.getNode(i).data.birthday.getMonth()].count++\r\n  }\r\n  return sort(result)\r\n}\r\n\r\nfunction sort(input) {\r\n  const heap = new Heap(input)\r\n  const result = []\r\n  const numberOfEls = heap.heapSize\r\n  for (let i = 0; i < numberOfEls; i++) {\r\n    result.push(heap.getMax())\r\n  }\r\n  return result.map((item) => item.month)\r\n}\r\n\r\n// let heap = new Heap([1, 2, 3, 6, 10, -2]);\r\n\r\n// const students = new Students;\r\n// students.addTail('1', 'address', 'avg', 'M', 11, 10, 2000);\r\n// students.addTail('2', 'address2', 'avg', 'M', 9, 3, 2000);\r\n// students.addTail('3', 'address3', 'avg', 'F', 25, 5, 2000);\r\n// students.addTail('4', 'address4', 'avg', 'M', 11, 5, 2000);\r\n// students.addTail('5', 'address5', 'avg', 'M', 9, 3, 2000);\r\n// students.addTail('6', 'address6', 'avg', 'F', 19, 3, 2000);\r\n// students.addTail('7', 'address7', 'avg', 'F', 14, 6, 2000);\r\n// console.log(students.showNodes());\r\n\r\n// console.log(byMonth(students));\r\nexport { Students, byMonth }\r\n","D:\\projects\\sr\\src\\components\\Page2.js",["91"],"import React, { useState } from 'react'\r\nimport { Students } from '../scripts/1/script'\r\nimport { Tree } from '../scripts/2/1'\r\n\r\nconst students = new Tree()\r\n\r\nconst initialForm = {\r\n  number: '',\r\n  fio: '',\r\n  group: '',\r\n  avg: '',\r\n}\r\n\r\nexport const Page2 = (props) => {\r\n  const [form, setForm] = useState({ ...initialForm })\r\n  const [numberToDelete, setNumberToDelete] = useState('')\r\n  const onInputChangeHandler = (e) => {\r\n    setForm({ ...form, [e.target.name]: e.target.value })\r\n  }\r\n  const onAddStudentHandler = (e) => {\r\n    students.insert(form.number, form.fio, form.group, form.avg)\r\n    setForm({ ...initialForm })\r\n  }\r\n  const studentsArr = []\r\n  students.traverse((item) => {\r\n    const el = (\r\n      <div key={item.number}>\r\n        {item.number}. {item.fio}, {item.group}, {item.avg}\r\n      </div>\r\n    )\r\n    studentsArr.push(el)\r\n  })\r\n  const onDeleteStudentHandler = (e) => {\r\n    students.remove(numberToDelete)\r\n    students.traverse(console.log)\r\n    setNumberToDelete('')\r\n  }\r\n  return (\r\n    <div>\r\n      <div>\r\n        Номер:{' '}\r\n        <input\r\n          name='number'\r\n          value={form.number}\r\n          onChange={onInputChangeHandler}\r\n          autoComplete='off'\r\n        />\r\n        ФИО:{' '}\r\n        <input\r\n          name='fio'\r\n          value={form.fio}\r\n          onChange={onInputChangeHandler}\r\n          autoComplete='off'\r\n        />\r\n        Группа:{' '}\r\n        <input\r\n          name='group'\r\n          value={form.group}\r\n          onChange={onInputChangeHandler}\r\n        />\r\n        Средний балл:{' '}\r\n        <input\r\n          name='avg'\r\n          value={form.avg}\r\n          onChange={onInputChangeHandler}\r\n          autoComplete='off'\r\n        />\r\n      </div>\r\n      <input type='button' value='Добавить' onClick={onAddStudentHandler} />\r\n      <input\r\n        value={numberToDelete}\r\n        onChange={(e) => setNumberToDelete(e.target.value)}\r\n      />\r\n      <input type='button' value='Удалить' onClick={onDeleteStudentHandler} />\r\n      {studentsArr}\r\n      <div>\r\n        {studentsArr.length\r\n          ? 'Худший средний балл: ' +\r\n            students.worst().avg +\r\n            ' у студента ' +\r\n            students.worst().fio\r\n          : null}\r\n        <br />\r\n        {studentsArr.length\r\n          ? 'Лучший средний балл: ' +\r\n            students.best().avg +\r\n            ' у студента ' +\r\n            students.best().fio\r\n          : null}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","D:\\projects\\sr\\src\\scripts\\2\\1.js",[],"D:\\projects\\sr\\src\\components\\Page3.js",[],"D:\\projects\\sr\\src\\scripts\\3\\1.js",["92"],"class Z {\r\n  constructor(totalV, ...bucketsV) {\r\n    this.setV(totalV)\r\n    this.setBucketsV(...bucketsV)\r\n  }\r\n\r\n  setV(val) {\r\n    this.totalV = val\r\n  }\r\n\r\n  setBucketsV(...vals) {\r\n    this.bucketsV = Array.from(new Set(vals)).sort((a, b) => b - a)\r\n  }\r\n\r\n  calc() {\r\n    const buckets = Array.from(this.bucketsV)\r\n    const bucketsMap = new Map()\r\n    for (const bucket of buckets) {\r\n      bucketsMap.set(bucket, 0)\r\n    }\r\n    let current = this.totalV\r\n    let last\r\n\r\n    do {\r\n      if (!buckets.length) {\r\n        break\r\n      }\r\n      if (buckets[0] <= current) {\r\n        current -= buckets[0]\r\n        bucketsMap.set(buckets[0], bucketsMap.get(buckets[0]) + 1)\r\n      } else {\r\n        last = buckets.shift()\r\n      }\r\n    } while (current > 0)\r\n    //bucketsMap.set(last, bucketsMap.get(last) + 1)\r\n\r\n    return bucketsMap\r\n  }\r\n}\r\n\r\n// const a = new Z()\r\n\r\n// const readline = require('readline')\r\n\r\n// const rl = readline.createInterface({\r\n//   input: process.stdin,\r\n//   output: process.stdout,\r\n// })\r\n\r\n// rl.question('Input TotalV and BucketsV: ', (answer) => {\r\n//   const answerArr = answer.split(' ').map((item) => +item)\r\n//   a.setV(answerArr.shift())\r\n//   a.setBucketsV(...answerArr)\r\n//   console.log(a.calc())\r\n//   rl.close()\r\n// })\r\n\r\n// console.log(a.bucketsV);\r\n// a.setBucketsV(10, 10, 15, 32, 1, 2, 2);\r\n// console.log(a.bucketsV);\r\n// console.log(a.calc());\r\n\r\n// const b = new Z(150, 60);\r\n// console.log(b.calc());\r\n\r\nexport { Z }\r\n","D:\\projects\\sr\\src\\scripts\\3\\2.js",[],"D:\\projects\\sr\\src\\components\\Page4.js",[],"D:\\projects\\sr\\src\\scripts\\4\\1.js",[],"D:\\projects\\sr\\src\\scripts\\4\\2.js",["93"],"const initial = [\r\n  [0, 3.22, 3.57, 4.12, 4, 4.85],\r\n  [0, 3.33, 4.87, 5.26, 7.34, 9.49],\r\n  [0, 4.27, 7.64, 10.25, 15.93, 16.12],\r\n]\r\n\r\nlet S = 5\r\nconst I = initial.length - 1\r\n\r\nconst last = initial[I]\r\n\r\nconst i2Best = []\r\n\r\nlet etap = 2\r\nfor (let i = 0; i < S; i++) {\r\n  const tmp = []\r\n  for (let j = 0; j < etap; j++) {\r\n    tmp.push(initial[1][j] + last[i - j + 1])\r\n  }\r\n  let best = 0\r\n  let bestI2 = -1\r\n  tmp.forEach((item, index) => {\r\n    if (item > best) {\r\n      best = item\r\n      bestI2 = index\r\n    }\r\n  })\r\n  i2Best.push({ item: best, index2: bestI2, index3: i - bestI2 + 1 })\r\n  etap++\r\n}\r\n\r\nconst i1 = i2Best.slice()\r\ni1.unshift({ item: 0, index2: 0, index3: 0 })\r\n\r\nfor (let i = 0; i < S + 1; i++) {\r\n  i1[S - i].item += initial[0][i]\r\n  i1[S - i].index1 = i\r\n}\r\n\r\ni1.sort((a, b) => b.item - a.item)\r\nconst result = i1[0]\r\n\r\nexport const calc = (matrix) => {\r\n  matrix = matrix.slice()\r\n  const I = 2\r\n  let S = 5\r\n  const last = matrix[I]\r\n  const i2Best = []\r\n  let etap = 2\r\n  for (let i = 0; i < S; i++) {\r\n    const tmp = []\r\n    for (let j = 0; j < etap; j++) {\r\n      tmp.push(matrix[1][j] + last[i - j + 1])\r\n    }\r\n    let best = 0\r\n    let bestI2 = -1\r\n    tmp.forEach((item, index) => {\r\n      if (item > best) {\r\n        best = item\r\n        bestI2 = index\r\n      }\r\n    })\r\n    i2Best.push({ item: best, index2: bestI2, index3: i - bestI2 + 1 })\r\n    etap++\r\n  }\r\n  const i1 = i2Best.slice()\r\n  i1.unshift({ item: 0, index2: 0, index3: 0 })\r\n  for (let i = 0; i < S + 1; i++) {\r\n    i1[S - i].item += matrix[0][i]\r\n    i1[S - i].index1 = i\r\n  }\r\n  i1.sort((a, b) => b.item - a.item)\r\n  const result = i1[0]\r\n  return [\r\n    matrix[0][result.index1],\r\n    matrix[1][result.index2],\r\n    matrix[2][result.index3],\r\n    result.item.toFixed(2),\r\n  ]\r\n}\r\n","D:\\projects\\sr\\src\\components\\Page5.js",[],"D:\\projects\\sr\\src\\scripts\\5\\1.js",["94","95"],"// const graph = [\r\n//   [0, 7, 9, 0, 0, 14],\r\n//   [7, 0, 10, 15, 0, 0],\r\n//   [9, 10, 0, 11, 0, 2],\r\n//   [0, 15, 11, 0, 6, 0],\r\n//   [0, 0, 0, 6, 0, 9],\r\n//   [14, 0, 2, 0, 9, 0],\r\n// ]\r\n\r\n// const SIZE = graph.length\r\n\r\n// console.log('Матрица смежности:', graph)\r\n\r\n// const beginIndex = 0\r\n// const range = 11\r\n\r\n// console.log('Range:', range)\r\n\r\n// const d = Array(SIZE).fill(Infinity)\r\n// const visited = Array(SIZE).fill(1)\r\n\r\n// let minIndex, min, temp\r\n\r\n// d[beginIndex] = 0\r\n\r\n// do {\r\n//   minIndex = Infinity\r\n//   min = Infinity\r\n//   for (let i = 0; i < SIZE; i++) {\r\n//     if (visited[i] === 1 && d[i] < min) {\r\n//       min = d[i]\r\n//       minIndex = i\r\n//     }\r\n//   }\r\n//   if (minIndex < Infinity) {\r\n//     for (let i = 0; i < SIZE; i++) {\r\n//       if (graph[minIndex][i] > 0) {\r\n//         temp = min + graph[minIndex][i]\r\n//         if (temp < d[i]) {\r\n//           d[i] = temp\r\n//         }\r\n//       }\r\n//     }\r\n//     visited[minIndex] = 0\r\n//   }\r\n// } while (minIndex < Infinity)\r\n\r\n// console.log('Растояние к каждой вершине', d)\r\n// let result = []\r\n// let result2 = []\r\n// d.forEach((item, index) => (item <= range ? result.push(index) : null))\r\n// d.forEach((item, index) => (item == range ? result2.push(index) : null))\r\n// console.log('Вершины в радиусе ' + range + ':', result)\r\n// console.log('Вершины на расстоянии ' + range + ':', result2)\r\n\r\nexport const calc = (matrix, beginIndex, range) => {\r\n  const d = Array(matrix.length).fill(Infinity)\r\n  const visited = Array(matrix.length).fill(1)\r\n\r\n  let minIndex, min, temp\r\n\r\n  d[beginIndex] = 0\r\n\r\n  do {\r\n    minIndex = Infinity\r\n    min = Infinity\r\n    for (let i = 0; i < matrix.length; i++) {\r\n      if (visited[i] === 1 && d[i] < min) {\r\n        min = d[i]\r\n        minIndex = i\r\n      }\r\n    }\r\n    if (minIndex < Infinity) {\r\n      for (let i = 0; i < matrix.length; i++) {\r\n        if (matrix[minIndex][i] > 0) {\r\n          temp = min + matrix[minIndex][i]\r\n          if (temp < d[i]) {\r\n            d[i] = temp\r\n          }\r\n        }\r\n      }\r\n      visited[minIndex] = 0\r\n    }\r\n  } while (minIndex < Infinity)\r\n  let result = []\r\n  let result2 = []\r\n  d.forEach((item, index) => (item <= range ? result.push(index) : null))\r\n  d.forEach((item, index) => (item == range ? result2.push(index) : null))\r\n  return 'Вершины в радиусе ' + range + ':' + result\r\n  console.log('Вершины на расстоянии ' + range + ':', result2)\r\n}\r\n","D:\\projects\\sr\\src\\scripts\\5\\2.js",["96"],"class Graph {\r\n  constructor(V) {\r\n    this.V = V\r\n    this.adj = new Array(V)\r\n    for (let i = 0; i < V; i++) {\r\n      this.adj[i] = []\r\n    }\r\n  }\r\n\r\n  addEdge(v, w) {\r\n    this.adj[v].push(w)\r\n  }\r\n\r\n  dfs(v, visited, callback) {\r\n    visited[v] = true\r\n    callback(v)\r\n    for (let i of this.adj[v]) {\r\n      if (!visited[i]) this.dfs(i, visited, callback)\r\n    }\r\n  }\r\n\r\n  getTranspose() {\r\n    const g = new Graph(this.V)\r\n    for (let v = 0; v < this.V; v++) {\r\n      for (let i = 0; i < this.adj[v].length; i++) {\r\n        g.adj[this.adj[v][i]].push(v)\r\n      }\r\n    }\r\n    return g\r\n  }\r\n\r\n  fillOrder(v, visited, stack) {\r\n    visited[v] = true\r\n    for (let i = 0; i < this.adj[v].length; i++) {\r\n      if (!visited[this.adj[v][i]]) {\r\n        this.fillOrder(this.adj[v][i], visited, stack)\r\n      }\r\n    }\r\n    stack.push(v)\r\n  }\r\n\r\n  printSCC() {\r\n    const stack = []\r\n    let result = ''\r\n    const visited = new Array(this.V).fill(false)\r\n    for (let i = 0; i < this.V; i++) {\r\n      if (!visited[i]) {\r\n        this.fillOrder(i, visited, stack)\r\n      }\r\n    }\r\n    const gt = this.getTranspose()\r\n    visited.fill(false)\r\n    while (stack.length) {\r\n      let v = stack.pop()\r\n      if (!visited[v]) {\r\n        gt.dfs(v, visited, (v) => (result += v + ' '))\r\n        result += '\\n'\r\n      }\r\n    }\r\n    return result\r\n  }\r\n}\r\n\r\n// const g = new Graph(5)\r\n// g.addEdge(1, 0)\r\n// g.addEdge(0, 2)\r\n// g.addEdge(2, 1)\r\n// g.addEdge(0, 3)\r\n// g.addEdge(3, 4)\r\n// console.log(g.adj)\r\n// g.printSCC()\r\n\r\nexport { Graph }\r\n","D:\\projects\\sr\\src\\components\\Page6.js",[],"D:\\projects\\sr\\src\\scripts\\6\\1.js",["97"],"const rates = [\r\n  [1, 0.23, 0.25, 16.43, 18.21, 4.94],\r\n  [4.34, 1, 1.11, 71.4, 79.09, 21.44],\r\n  [3.93, 0.9, 1, 64.52, 71.48, 19.37],\r\n  [0.061, 0.014, 0.015, 1, 1.11, 0.3],\r\n  [0.055, 0.013, 0.014, 0.9, 1, 0.27],\r\n  [0.2, 0.047, 0.052, 3.33, 3.69, 1],\r\n]\r\n\r\nconst currencies = ['PLN', 'EUR', 'USD', 'RUB', 'INR', 'MXN']\r\n\r\nfunction negateLogarithmConvertor(matrix) {\r\n  return matrix.map((row) => row.map((item) => -Math.log(item)))\r\n}\r\n\r\nexport function arbitrage(ratesMatrix) {\r\n  const matrix = negateLogarithmConvertor(ratesMatrix)\r\n  let source = 0\r\n  const n = matrix.length\r\n  const minDist = new Array(n).fill(Infinity)\r\n  const pre = new Array(n).fill(-1)\r\n  minDist[source] = source\r\n  for (let _ = 0; _ < n - 1; _++) {\r\n    for (let sourceCurr = 0; sourceCurr < n; sourceCurr++) {\r\n      for (let destCurr = 0; destCurr < n; destCurr++) {\r\n        if (\r\n          minDist[destCurr] >\r\n          minDist[sourceCurr] + matrix[sourceCurr][destCurr]\r\n        ) {\r\n          minDist[destCurr] = minDist[sourceCurr] + matrix[sourceCurr][destCurr]\r\n          pre[destCurr] = sourceCurr\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  let result = ''\r\n\r\n  for (let sourceCurr = 0; sourceCurr < n; sourceCurr++) {\r\n    for (let destCurr = 0; destCurr < n; destCurr++) {\r\n      if (\r\n        minDist[destCurr] >\r\n        minDist[sourceCurr] + matrix[sourceCurr][destCurr]\r\n      ) {\r\n        let printCycle = [destCurr, sourceCurr]\r\n\r\n        while (!printCycle.includes(pre[sourceCurr])) {\r\n          printCycle.push(pre[sourceCurr])\r\n          sourceCurr = pre[sourceCurr]\r\n        }\r\n\r\n        printCycle.push(pre[sourceCurr])\r\n        printCycle.reverse()\r\n        result += printCycle.map((index) => currencies[index]).join(' => ')\r\n      }\r\n    }\r\n  }\r\n  return result\r\n}\r\n\r\n//arbitrage(currencies, rates)\r\n",["98","99"],"D:\\projects\\sr\\src\\scripts\\6\\2.js",["100","101"],"const matrix = [\r\n  [0, 25, Infinity, Infinity, 17],\r\n  [25, 0, 10, Infinity, Infinity],\r\n  [Infinity, 10, 0, 5, 10],\r\n  [Infinity, Infinity, 5, 0, Infinity],\r\n  [17, Infinity, 10, 10, 0],\r\n]\r\n\r\nexport function getData() {\r\n  return [\r\n    [0, 25, Infinity, Infinity, 17],\r\n    [25, 0, 10, Infinity, Infinity],\r\n    [Infinity, 10, 0, 5, 10],\r\n    [Infinity, Infinity, 5, 0, Infinity],\r\n    [17, Infinity, 10, 10, 0],\r\n  ]\r\n}\r\n\r\nexport function f(matrix) {\r\n  // console.log('Map matrix:', matrix)\r\n  const v = matrix.length\r\n  const path = []\r\n  for (let i = 0; i < v; i++) {\r\n    path.push(new Array(v).fill(null))\r\n    for (let j = 0; j < v; j++) {\r\n      if (matrix[i][j] != Infinity) path[i][j] = j\r\n    }\r\n  }\r\n  for (let k = 0; k < v; k++) {\r\n    for (let i = 0; i < v; i++) {\r\n      for (let j = 0; j < v; j++) {\r\n        if (matrix[i][j] > matrix[i][k] + matrix[k][j]) {\r\n          matrix[i][j] = matrix[i][k] + matrix[k][j]\r\n          path[i][j] = path[i][k]\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return { matrix, path }\r\n}\r\n\r\nexport function path(path, u, v) {\r\n  if (path[u][v] === null) {\r\n    return []\r\n  }\r\n  const result = [u]\r\n  while (u !== v) {\r\n    u = path[u][v]\r\n    result.push(u)\r\n  }\r\n  return result\r\n}\r\n\r\n// const result = f(getData())\r\n// console.log('paths: ', result.path)\r\n// const start = 3;\r\n// const end = 0;\r\n// console.log(`path from ${start} to ${end}`, path(result.path, start, end))\r\n\r\nexport const dijkstra = function (graph, start) {\r\n  const v = graph.length\r\n  const distances = new Array(v).fill(Infinity)\r\n  distances[start] = 0\r\n  const prevs = new Array(v).fill(null)\r\n  prevs[start] = start\r\n  const visited = new Array(v).fill(false)\r\n\r\n  while (true) {\r\n    let shortestDistance = Infinity\r\n    let shortestIndex = -1\r\n    for (let i = 0; i < v; i++) {\r\n      if (distances[i] < shortestDistance && !visited[i]) {\r\n        shortestDistance = distances[i]\r\n        shortestIndex = i\r\n      }\r\n    }\r\n    if (shortestIndex === -1) {\r\n      return { distances, prevs }\r\n    }\r\n    for (let i = 0; i < v; i++) {\r\n      if (\r\n        graph[shortestIndex][i] !== 0 &&\r\n        distances[i] > distances[shortestIndex] + graph[shortestIndex][i]\r\n      ) {\r\n        distances[i] = distances[shortestIndex] + graph[shortestIndex][i]\r\n        prevs[i] = shortestIndex\r\n      }\r\n    }\r\n    visited[shortestIndex] = true\r\n  }\r\n}\r\n\r\nexport function _path(path, u, v) {\r\n  if (path[v] === null) {\r\n    return []\r\n  }\r\n  const result = [u]\r\n  while (u !== v) {\r\n    u = path[u]\r\n    result.push(u)\r\n  }\r\n  return result.reverse()\r\n}\r\n\r\n// const input = getData();\r\n// const start = 0\r\n// const end = 5\r\n// const result = dijkstra(input, start)\r\n// const result2 = _path(result.prevs, 5, 0)\r\n// console.log('mapMatrix:', input)\r\n// console.log('distances:', result.distances)\r\n// console.log(`path from ${start} to ${end}:`, result2)\r\n",{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":6,"column":14,"nodeType":"108","messageId":"109","endLine":6,"endColumn":16},{"ruleId":"110","severity":1,"message":"111","line":2,"column":10,"nodeType":"112","messageId":"113","endLine":2,"endColumn":18},{"ruleId":"110","severity":1,"message":"114","line":32,"column":9,"nodeType":"112","messageId":"113","endLine":32,"endColumn":13},{"ruleId":"110","severity":1,"message":"115","line":41,"column":7,"nodeType":"112","messageId":"113","endLine":41,"endColumn":13},{"ruleId":"106","severity":1,"message":"116","line":88,"column":36,"nodeType":"108","messageId":"109","endLine":88,"endColumn":38},{"ruleId":"117","severity":1,"message":"118","line":90,"column":3,"nodeType":"119","messageId":"120","endLine":90,"endColumn":63},{"ruleId":"121","severity":1,"message":"122","line":56,"column":28,"nodeType":"123","messageId":"124","endLine":56,"endColumn":54},{"ruleId":"110","severity":1,"message":"125","line":1,"column":7,"nodeType":"112","messageId":"113","endLine":1,"endColumn":12},{"ruleId":"102","replacedBy":"126"},{"ruleId":"104","replacedBy":"127"},{"ruleId":"110","severity":1,"message":"128","line":1,"column":7,"nodeType":"112","messageId":"113","endLine":1,"endColumn":13},{"ruleId":"106","severity":1,"message":"107","line":26,"column":24,"nodeType":"108","messageId":"109","endLine":26,"endColumn":26},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unused-vars","'Students' is defined but never used.","Identifier","unusedVar","'last' is assigned a value but never used.","'result' is assigned a value but never used.","Expected '===' and instead saw '=='.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'result'.","ArrowFunctionExpression","unsafeRefs","'rates' is assigned a value but never used.",["129"],["130"],"'matrix' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]