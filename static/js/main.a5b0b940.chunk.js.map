{"version":3,"sources":["components/Navbar.js","scripts/1/script.js","components/Page1.js","components/Page2.js","scripts/2/1.js","scripts/3/1.js","scripts/3/2.js","components/Page3.js","scripts/4/2.js","components/Page4.js","scripts/4/1.js","components/Page5.js","scripts/5/2.js","scripts/5/1.js","scripts/6/1.js","components/Page6.js","scripts/6/2.js","App.js","index.js"],"names":["Navbar","props","className","id","to","href","List","data","this","_count","first","last","undefined","addHead","prev","next","index","isEmpty","Error","current","i","node","_createNode","currentNode","getNode","result","push","toArray","reverse","console","log","toArrayTail","Heap","_arr","Array","isArray","build","add","heapSize","parent","Math","ceil","temp","leftChild","rightChild","largestChild","heapify","pop","length","byMonth","students","map","month","count","toString","birthday","getMonth","input","heap","numberOfEls","getMax","item","sort","fio","address","avg","gender","arguments","day","year","Date","Page1","defaultForm","value","useState","setMonth","form","setForm","onFormChangeHandler","e","target","name","studentsArray","placeholder","type","onChange","autoComplete","onClick","addTail","toDateString","root","left","right","number","group","newNode","createNode","insertNode","callback","traverse","search","minNode","removeNode","min","max","maxNode","initialForm","Page2","numberToDelete","setNumberToDelete","onInputChangeHandler","studentsArr","el","insert","remove","worst","best","Z","totalV","setV","bucketsV","setBucketsV","val","vals","from","Set","a","b","buckets","bucketsMap","Map","bucket","set","get","shift","Haffman","fs","require","writeFileSync","codeTableStr","codeTable","entries","str","letter","has","item1","item2","frequencyTable","entriesArr","table","code","encodedStr","decodeTable","__makeDecodeTable","encodedText","decoded","initForm","total","Page3","prop","setResult","setStr","hashResult","setHashResult","split","res","calc","tuple","makeFrequencyTable","treeRoot","makeTree","makeCodeTable","encoded","encode","frequencyTableStr","decode","initial","i2Best","etap","tmp","j","bestI2","forEach","index2","index3","i1","slice","unshift","S","index1","Page4","values","setValues","result2","setResult2","onValueChange","arr","inputs","factory","els","_","trim","start","startMax","substr","matrix","toFixed","resStr","initialMatrix","g1","V","adj","v","w","visited","dfs","g","Graph","stack","fillOrder","fill","gt","getTranspose","Page5","range","setRange","setMatrix","verter","setVertex","setAdj","onMatrixInputChange","newMatrix","row","curRow","beginIndex","minIndex","d","Infinity","adjs","v1","v2","addEdge","printSCC","currencies","arbitrage","ratesMatrix","negateLogarithmConvertor","n","minDist","pre","sourceCurr","destCurr","printCycle","includes","join","initialRates","Page6","rates","setRates","matrix2","setMatrix2","result1","setResult1","result3","setResult3","setStart","start2","setStart2","end","setEnd","end2","setEnd2","makeMatrix","state","st","newState","inputs2","inputs3","graph","distances","prevs","shortestDistance","shortestIndex","dijkstra","reduce","path","u","_path","k","f","__path","$path","App","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5b0b940.chunk.js","sourcesContent":["import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nexport const Navbar = (props) => {\r\n  return (\r\n    <div className='navbar'>\r\n      <nav className='light-green darken-1'>\r\n        <div className='container'>\r\n          <div className='nav-wrapper'>\r\n            <ul id='nav-mobile' className='left hide-on-med-and-down'>\r\n              <li>\r\n                <NavLink to='/1' href='sass.html'>\r\n                  ПР 1\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink to='/2' href='sass.html'>\r\n                  ПР 2\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink to='/3' href='sass.html'>\r\n                  ПР 3\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink to='/4' href='sass.html'>\r\n                  ПР 4\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink to='/5' href='sass.html'>\r\n                  ПР 5\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink to='/6' href='sass.html'>\r\n                  ПР 6\r\n                </NavLink>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  )\r\n}\r\n","class List {\r\n  constructor(data) {\r\n    this._count = 0\r\n    this.first = null\r\n    this.last = null\r\n    if (data != undefined) {\r\n      this.addHead(data)\r\n    }\r\n  }\r\n\r\n  _createNode(data, prev, next) {\r\n    return {\r\n      data: data,\r\n      prev: prev,\r\n      next: next,\r\n    }\r\n  }\r\n\r\n  isEmpty() {\r\n    return this._count === 0\r\n  }\r\n\r\n  getNode(index) {\r\n    if (this.isEmpty()) throw new Error('List is empty!')\r\n    if (index < this._count / 2) {\r\n      let current = this.first\r\n      for (let i = 0; i < index; i++) {\r\n        current = current.next\r\n      }\r\n      return current\r\n    } else {\r\n      let current = this.last\r\n      for (let i = this._count - 1; i > index; i--) {\r\n        current = current.prev\r\n      }\r\n      return current\r\n    }\r\n  }\r\n\r\n  addHead(data) {\r\n    const node = this._createNode(data, null, this.first)\r\n    if (this.isEmpty) this.last = node\r\n    else this.first.prev = node\r\n    this.first = node\r\n    this._count++\r\n    return this\r\n  }\r\n\r\n  addTail(data) {\r\n    const node = this._createNode(data, this.last, null)\r\n    if (this.isEmpty()) this.first = node\r\n    else this.last.next = node\r\n    this.last = node\r\n    this._count++\r\n    return this\r\n  }\r\n\r\n  add(data, index) {\r\n    const currentNode = this.getNode(index)\r\n    const node = this._createNode(data, currentNode, currentNode.next)\r\n    currentNode.next = node\r\n    node.next.prev = node\r\n    this._count++\r\n    return this\r\n  }\r\n\r\n  shift() {\r\n    this.first = this.first.next\r\n    this.first.prev = null\r\n    this._count--\r\n    return this\r\n  }\r\n\r\n  pop() {\r\n    this.last = this.last.prev\r\n    this.last.next = null\r\n    this._count--\r\n    return this\r\n  }\r\n\r\n  remove(index) {\r\n    const node = this.getNode(index)\r\n    node.prev.next = node.next\r\n    node.next.prev = node.prev\r\n    this._count--\r\n    return this\r\n  }\r\n\r\n  toArray() {\r\n    const result = []\r\n    let current = this.first\r\n    while (current) {\r\n      result.push(current.data)\r\n      current = current.next\r\n    }\r\n    return result\r\n  }\r\n\r\n  toArrayTail() {\r\n    return this.toArray().reverse()\r\n  }\r\n\r\n  showNodes() {\r\n    console.log(this.toArray())\r\n  }\r\n\r\n  showNodesTail() {\r\n    console.log(this.toArrayTail())\r\n  }\r\n}\r\n\r\nclass Heap {\r\n  constructor(data) {\r\n    this._arr = []\r\n    if (Array.isArray(data)) this.build(data)\r\n    else if (data) this.add(data)\r\n  }\r\n\r\n  get heapSize() {\r\n    return this._arr.length\r\n  }\r\n\r\n  add(data) {\r\n    this._arr.push(data)\r\n    let i = this.heapSize - 1\r\n    let parent = Math.ceil((i - 1) / 2)\r\n    while (i > 0 && this._arr[parent] < this._arr[i]) {\r\n      let temp = this._arr[i]\r\n      this._arr[i] = this._arr[parent]\r\n      this._arr[parent] = temp\r\n      i = parent\r\n      parent = Math.ceil((i - 1) / 2)\r\n    }\r\n  }\r\n\r\n  heapify(i) {\r\n    let leftChild, rightChild, largestChild\r\n    while (true) {\r\n      leftChild = 2 * i + 1\r\n      rightChild = 2 * i + 2\r\n      largestChild = i\r\n      if (\r\n        leftChild < this.heapSize &&\r\n        this._arr[leftChild] > this._arr[largestChild]\r\n      ) {\r\n        largestChild = leftChild\r\n      }\r\n      if (\r\n        rightChild < this.heapSize &&\r\n        this._arr[rightChild] > this._arr[largestChild]\r\n      ) {\r\n        largestChild = rightChild\r\n      }\r\n      if (largestChild === i) {\r\n        break\r\n      }\r\n\r\n      let temp = this._arr[i]\r\n      this._arr[i] = this._arr[largestChild]\r\n      this._arr[largestChild] = temp\r\n      i = largestChild\r\n    }\r\n  }\r\n\r\n  build(data) {\r\n    this._arr = data\r\n\r\n    for (let i = this.heapSize / 2; i >= 0; i--) {\r\n      this.heapify(i)\r\n    }\r\n  }\r\n\r\n  getMax() {\r\n    let result = this._arr[0]\r\n    this._arr[0] = this._arr[this.heapSize - 1]\r\n    this._arr.pop()\r\n    this.heapify(0)\r\n    return result\r\n  }\r\n\r\n  getHeap() {\r\n    return this._arr\r\n  }\r\n\r\n  showHeap() {\r\n    console.log(this._arr)\r\n  }\r\n}\r\n\r\nclass Students extends List {\r\n  constructor(fio, address, avg, gender, birthday) {\r\n    if (arguments.length > 0) {\r\n      super({\r\n        fio: fio,\r\n        address: address,\r\n        avg: avg,\r\n        gender: gender,\r\n        birthday: birthday,\r\n      })\r\n    } else {\r\n      super()\r\n    }\r\n  }\r\n\r\n  addTail(fio, address, avg, gender, day, month, year) {\r\n    super.addTail({\r\n      fio: fio,\r\n      address: address,\r\n      avg: avg,\r\n      gender: gender,\r\n      birthday: new Date(year, month, day),\r\n    })\r\n  }\r\n}\r\n\r\nfunction byMonth(students) {\r\n  const months = [\r\n    'jan',\r\n    'feb',\r\n    'mar',\r\n    'apr',\r\n    'may',\r\n    'jun',\r\n    'jul',\r\n    'aug',\r\n    'sep',\r\n    'oct',\r\n    'nov',\r\n    'dec',\r\n  ]\r\n  let result = months.map((month) => {\r\n    const result = {\r\n      month: month,\r\n      count: 0,\r\n      toString() {\r\n        return this.count\r\n      },\r\n    }\r\n    return result\r\n  })\r\n  for (let i = 0; i < students._count; i++) {\r\n    result[students.getNode(i).data.birthday.getMonth()].count++\r\n  }\r\n  return sort(result)\r\n}\r\n\r\nfunction sort(input) {\r\n  const heap = new Heap(input)\r\n  const result = []\r\n  const numberOfEls = heap.heapSize\r\n  for (let i = 0; i < numberOfEls; i++) {\r\n    result.push(heap.getMax())\r\n  }\r\n  return result.map((item) => item.month)\r\n}\r\n\r\n// let heap = new Heap([1, 2, 3, 6, 10, -2]);\r\n\r\n// const students = new Students;\r\n// students.addTail('1', 'address', 'avg', 'M', 11, 10, 2000);\r\n// students.addTail('2', 'address2', 'avg', 'M', 9, 3, 2000);\r\n// students.addTail('3', 'address3', 'avg', 'F', 25, 5, 2000);\r\n// students.addTail('4', 'address4', 'avg', 'M', 11, 5, 2000);\r\n// students.addTail('5', 'address5', 'avg', 'M', 9, 3, 2000);\r\n// students.addTail('6', 'address6', 'avg', 'F', 19, 3, 2000);\r\n// students.addTail('7', 'address7', 'avg', 'F', 14, 6, 2000);\r\n// console.log(students.showNodes());\r\n\r\n// console.log(byMonth(students));\r\nexport { Students, byMonth }\r\n","import React, { useState } from 'react'\r\nimport { Students, byMonth } from '../scripts/1/script'\r\n\r\nconst students = new Students()\r\n\r\nexport const Page1 = (props) => {\r\n  const defaultForm = {\r\n    fio: '',\r\n    address: '',\r\n    value: '',\r\n    gender: '',\r\n    day: '',\r\n    month: '',\r\n    year: '',\r\n  }\r\n  const [month, setMonth] = useState([])\r\n  const [form, setForm] = useState({ ...defaultForm })\r\n  //const [students, setStudents] = useState(new Students())\r\n  const onFormChangeHandler = (e) => {\r\n    setForm((form) => ({\r\n      ...form,\r\n      [e.target.name]: e.target.value,\r\n    }))\r\n  }\r\n  const onButtonClickHandler = (e) => {\r\n    students.addTail(\r\n      form.fio,\r\n      form.address,\r\n      form.value,\r\n      form.gender,\r\n      form.day,\r\n      form.month - 1,\r\n      form.year\r\n    )\r\n    setForm({ ...defaultForm })\r\n  }\r\n  const studentsArray = students.toArray()\r\n  return (\r\n    <div className=''>\r\n      <div className=''>\r\n        <div className='input-field'>\r\n          <input\r\n            placeholder='ФИО'\r\n            id='first_name'\r\n            type='text'\r\n            className='validate'\r\n            name='fio'\r\n            value={form.fio}\r\n            onChange={onFormChangeHandler}\r\n            autoComplete='off'\r\n          />\r\n        </div>\r\n        <div className='input-field'>\r\n          <input\r\n            placeholder='Адрес'\r\n            id='first_name'\r\n            type='text'\r\n            className='validate'\r\n            name='address'\r\n            value={form.address}\r\n            onChange={onFormChangeHandler}\r\n            autoComplete='off'\r\n          />\r\n        </div>\r\n        <div className='input-field'>\r\n          <input\r\n            placeholder='Средний балл'\r\n            id='first_name'\r\n            type='text'\r\n            className='validate'\r\n            name='value'\r\n            value={form.value}\r\n            onChange={onFormChangeHandler}\r\n            autoComplete='off'\r\n          />\r\n        </div>\r\n        <div className='input-field'>\r\n          <input\r\n            placeholder='Пол'\r\n            id='first_name'\r\n            type='text'\r\n            className='validate'\r\n            name='gender'\r\n            value={form.gender}\r\n            onChange={onFormChangeHandler}\r\n            autoComplete='off'\r\n          />\r\n        </div>\r\n        <div className='row'>\r\n          <div className='input-field col s2'>\r\n            <input\r\n              placeholder='ДД'\r\n              id='first_name'\r\n              type='text'\r\n              className='validate'\r\n              name='day'\r\n              value={form.day}\r\n              onChange={onFormChangeHandler}\r\n              autoComplete='off'\r\n            />\r\n          </div>\r\n          <div className='input-field col s2'>\r\n            <input\r\n              placeholder='ММ'\r\n              id='first_name'\r\n              type='text'\r\n              className='validate'\r\n              name='month'\r\n              value={form.month}\r\n              onChange={onFormChangeHandler}\r\n              autoComplete='off'\r\n            />\r\n          </div>\r\n          <div className='input-field col s2'>\r\n            <input\r\n              placeholder='ГГГГ'\r\n              id='first_name'\r\n              type='text'\r\n              className='validate'\r\n              name='year'\r\n              value={form.year}\r\n              onChange={onFormChangeHandler}\r\n              autoComplete='off'\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div\r\n        className='waves-effect waves-light btn-small'\r\n        onClick={onButtonClickHandler}\r\n      >\r\n        Добавить\r\n      </div>\r\n      <br />\r\n      {studentsArray.map((item, index) => {\r\n        return (\r\n          <div key={index}>\r\n            name: {item.fio} address: {item.address} value: {item.value} gender:{' '}\r\n            {item.gender} birthday:{item.birthday.toDateString()}\r\n          </div>\r\n        )\r\n      })}\r\n      <br />\r\n      <div\r\n        className='waves-effect waves-light btn-small'\r\n        onClick={() => setMonth(byMonth(students))}\r\n      >\r\n        По месяцам\r\n      </div>\r\n      <div>\r\n        {month.map((item, index) => {\r\n          return item + ' '\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Students } from '../scripts/1/script'\r\nimport { Tree } from '../scripts/2/1'\r\n\r\nconst students = new Tree()\r\n\r\nconst initialForm = {\r\n  number: '',\r\n  fio: '',\r\n  group: '',\r\n  avg: '',\r\n}\r\n\r\nexport const Page2 = (props) => {\r\n  const [form, setForm] = useState({ ...initialForm })\r\n  const [numberToDelete, setNumberToDelete] = useState('')\r\n  const onInputChangeHandler = (e) => {\r\n    setForm({ ...form, [e.target.name]: e.target.value })\r\n  }\r\n  const onAddStudentHandler = (e) => {\r\n    students.insert(form.number, form.fio, form.group, form.avg)\r\n    setForm({ ...initialForm })\r\n  }\r\n  const studentsArr = []\r\n  students.traverse((item) => {\r\n    const el = (\r\n      <div key={item.number}>\r\n        {item.number}. {item.fio}, {item.group}, {item.avg}\r\n      </div>\r\n    )\r\n    studentsArr.push(el)\r\n  })\r\n  const onDeleteStudentHandler = (e) => {\r\n    students.remove(numberToDelete)\r\n    students.traverse(console.log)\r\n    setNumberToDelete('')\r\n  }\r\n  return (\r\n    <div>\r\n      <div>\r\n        Номер:{' '}\r\n        <input\r\n          name='number'\r\n          value={form.number}\r\n          onChange={onInputChangeHandler}\r\n          autoComplete='off'\r\n        />\r\n        ФИО:{' '}\r\n        <input\r\n          name='fio'\r\n          value={form.fio}\r\n          onChange={onInputChangeHandler}\r\n          autoComplete='off'\r\n        />\r\n        Группа:{' '}\r\n        <input\r\n          name='group'\r\n          value={form.group}\r\n          onChange={onInputChangeHandler}\r\n        />\r\n        Средний балл:{' '}\r\n        <input\r\n          name='avg'\r\n          value={form.avg}\r\n          onChange={onInputChangeHandler}\r\n          autoComplete='off'\r\n        />\r\n      </div>\r\n      <input type='button' value='Добавить' onClick={onAddStudentHandler} />\r\n      <input\r\n        value={numberToDelete}\r\n        onChange={(e) => setNumberToDelete(e.target.value)}\r\n      />\r\n      <input type='button' value='Удалить' onClick={onDeleteStudentHandler} />\r\n      {studentsArr}\r\n      <div>\r\n        {studentsArr.length\r\n          ? 'Худший средний балл: ' +\r\n            students.worst().avg +\r\n            ' у студента ' +\r\n            students.worst().fio\r\n          : null}\r\n        <br />\r\n        {studentsArr.length\r\n          ? 'Лучший средний балл: ' +\r\n            students.best().avg +\r\n            ' у студента ' +\r\n            students.best().fio\r\n          : null}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","// class Hash {\r\n//   constructor() {\r\n//     this.table = Array(10)\r\n//     this.hash = function (key) {\r\n//       return Math.trunc(\r\n//         this.table.length * (key * 0.256 - Math.floor(key * 0.256))\r\n//       )\r\n//     }\r\n//   }\r\n\r\n//   add(data) {\r\n//     if (!this.table[this.hash(data.name.length)])\r\n//       this.table[this.hash(data.name.length)] = {}\r\n//     this.table[this.hash(data.name.length)][data.name] = data.job\r\n//   }\r\n\r\n//   remove(name) {\r\n//     if (!this.table[this.hash(name.length)]) return\r\n//     if (this.table[this.hash(name.length)].hasOwnProperty(name)) {\r\n//       delete this.table[this.hash(name.length)][name]\r\n//     }\r\n//   }\r\n\r\n//   getJob(name) {\r\n//     if (\r\n//       this.table[this.hash(name.length)] &&\r\n//       this.table[this.hash(name.length)].hasOwnProperty(name)\r\n//     )\r\n//       return this.table[this.hash(name.length)][name]\r\n//   }\r\n// }\r\n\r\n// const hash = new Hash()\r\n\r\n// const fs = require('fs')\r\n// const file = fs.readFileSync('./workers.txt', 'utf-8')\r\n// const workers = file.split(';')\r\n// for (const worker of workers) {\r\n//   ;[name, job] = worker.split(':')\r\n//   hash.add({ name: name, job: job })\r\n// }\r\n// console.log('HASH TABLE:', hash.table)\r\n// console.log('GET JOB:', hash.getJob('Philipp'))\r\n// hash.remove('Philipp')\r\n// console.log('HASH TABLE AFTER REMOVE:', hash.table)\r\n\r\nclass Tree {\r\n  constructor() {\r\n    this.root = null\r\n  }\r\n\r\n  createNode(data) {\r\n    return {\r\n      data: data,\r\n      left: null,\r\n      right: null,\r\n    }\r\n  }\r\n\r\n  insert(number = 0, fio = 'FIO', group = 'GROUP', avg = 0) {\r\n    const newNode = this.createNode({\r\n      number: number,\r\n      fio: fio,\r\n      group: group,\r\n      avg: avg,\r\n    })\r\n    if (this.root === null) {\r\n      this.root = newNode\r\n      return\r\n    }\r\n    this.insertNode(newNode, this.root)\r\n  }\r\n\r\n  insertNode(newNode, node) {\r\n    if (newNode.data.number < node.data.number) {\r\n      if (node.left === null) {\r\n        node.left = newNode\r\n      } else {\r\n        this.insertNode(newNode, node.left)\r\n      }\r\n    } else {\r\n      if (node.right === null) {\r\n        node.right = newNode\r\n      } else {\r\n        this.insertNode(newNode, node.right)\r\n      }\r\n    }\r\n  }\r\n\r\n  traverse(callback, node = this.root) {\r\n    if (node != null) {\r\n      this.traverse(callback, node.left)\r\n      callback(node.data)\r\n      this.traverse(callback, node.right)\r\n    }\r\n  }\r\n\r\n  search(data, node = this.root) {\r\n    if (node === null) {\r\n      return null\r\n    }\r\n    if (data < node.data.number) {\r\n      return this.search(data, node.left)\r\n    }\r\n    if (data > node.data.number) {\r\n      return this.search(data, node.right)\r\n    }\r\n    return node\r\n  }\r\n\r\n  minNode(node = this.root) {\r\n    if (node.left === null) {\r\n      return node\r\n    }\r\n    return this.minNode(node.left)\r\n  }\r\n\r\n  remove(data) {\r\n    this.root = this.removeNode(data)\r\n  }\r\n\r\n  removeNode(data, node = this.root) {\r\n    if (node === null) {\r\n      return null\r\n    }\r\n    if (data < node.data.number) {\r\n      node.left = this.removeNode(data, node.left)\r\n      return node\r\n    }\r\n    if (data > node.data.number) {\r\n      node.right = this.removeNode(data, node.right)\r\n      return node\r\n    }\r\n    if (node.left === null && node.right === null) {\r\n      node = null\r\n      return node\r\n    }\r\n    if (node.left === null) {\r\n      node = node.right\r\n      return node\r\n    }\r\n    if (node.right === null) {\r\n      node = node.left\r\n      return node\r\n    }\r\n    const newNode = this.minNode(node.right)\r\n    node.data = newNode.data\r\n    node.right = this.removeNode(newNode.data, node.right)\r\n    return node\r\n  }\r\n\r\n  worst() {\r\n    let min = 100\r\n    let minNode = null\r\n    this.traverse((node) => {\r\n      if (node.avg < min) {\r\n        min = node.avg\r\n        minNode = node\r\n      }\r\n    })\r\n    return minNode\r\n  }\r\n\r\n  best() {\r\n    let max = 0\r\n    let maxNode = null\r\n    this.traverse((node) => {\r\n      if (node.avg > max) {\r\n        max = node.avg\r\n        maxNode = node\r\n      }\r\n    })\r\n    return maxNode\r\n  }\r\n\r\n  find(number) {\r\n    return this.search(number).data.fio\r\n  }\r\n}\r\n// const tree = new Tree()\r\n// tree.insert(12, 'Philipp', '1', 100)\r\n// tree.insert(6, 'usr2', '1', 59)\r\n// tree.insert(32, 'user3', '2', 90)\r\n// tree.insert(5, 'user4', '2', 81)\r\n// console.log('Список студентов:')\r\n// tree.traverse((node) => console.log(node))\r\n// console.log('Худший средний балл: ', tree.worst())\r\n// console.log('Лучший средний балл: ', tree.best())\r\n// console.log('Студент с номером зачетки 6: ', tree.find(6))\r\n// tree.remove(5)\r\n// console.log('Список студентов после удаления студента с номером зачетки 5:')\r\n// tree.traverse((node) => console.log(node))\r\n\r\nexport { Tree }\r\n","class Z {\r\n  constructor(totalV, ...bucketsV) {\r\n    this.setV(totalV)\r\n    this.setBucketsV(...bucketsV)\r\n  }\r\n\r\n  setV(val) {\r\n    this.totalV = val\r\n  }\r\n\r\n  setBucketsV(...vals) {\r\n    this.bucketsV = Array.from(new Set(vals)).sort((a, b) => b - a)\r\n  }\r\n\r\n  calc() {\r\n    const buckets = Array.from(this.bucketsV)\r\n    const bucketsMap = new Map()\r\n    for (const bucket of buckets) {\r\n      bucketsMap.set(bucket, 0)\r\n    }\r\n    let current = this.totalV\r\n    let last\r\n\r\n    do {\r\n      if (!buckets.length) {\r\n        break\r\n      }\r\n      if (buckets[0] <= current) {\r\n        current -= buckets[0]\r\n        bucketsMap.set(buckets[0], bucketsMap.get(buckets[0]) + 1)\r\n      } else {\r\n        last = buckets.shift()\r\n      }\r\n    } while (current > 0)\r\n    //bucketsMap.set(last, bucketsMap.get(last) + 1)\r\n\r\n    return bucketsMap\r\n  }\r\n}\r\n\r\n// const a = new Z()\r\n\r\n// const readline = require('readline')\r\n\r\n// const rl = readline.createInterface({\r\n//   input: process.stdin,\r\n//   output: process.stdout,\r\n// })\r\n\r\n// rl.question('Input TotalV and BucketsV: ', (answer) => {\r\n//   const answerArr = answer.split(' ').map((item) => +item)\r\n//   a.setV(answerArr.shift())\r\n//   a.setBucketsV(...answerArr)\r\n//   console.log(a.calc())\r\n//   rl.close()\r\n// })\r\n\r\n// console.log(a.bucketsV);\r\n// a.setBucketsV(10, 10, 15, 32, 1, 2, 2);\r\n// console.log(a.bucketsV);\r\n// console.log(a.calc());\r\n\r\n// const b = new Z(150, 60);\r\n// console.log(b.calc());\r\n\r\nexport { Z }\r\n","// const fs = require('fs');\r\n// const str = fs.readFileSync('./str.txt', 'utf-8');\r\n// const entries = new Map;\r\n// for (let letter of str) {\r\n//   if (!entries.has(letter)) {\r\n//     entries.set(letter, 1);\r\n//   } else {\r\n//     entries.set(letter, entries.get(letter) + 1);\r\n//   }\r\n// }\r\n\r\n// const entriesArr = Array.from(entries, item => ({ letter: item[0], entries: item[1], left: null, right: null }));\r\n// entriesArr.sort((item1, item2) => item2.entries - item1.entries);\r\n\r\n// while (entriesArr.length > 1) {\r\n//   const item1 = entriesArr.pop();\r\n//   const item2 = entriesArr.pop();\r\n//   entriesArr.push({ letter: null, entries: item1.entries + item2.entries, left: item2, right: item1 });\r\n//   entriesArr.sort((item1, item2) => item2.entries - item1.entries);\r\n// }\r\n\r\n// const root = entriesArr[0];\r\n\r\n// const table = new Map;\r\n\r\n// function search(current, code = '') {\r\n//   if (current.letter) {\r\n//     table.set(current.letter, code);\r\n//   }\r\n//   if (current.left !== null) {\r\n//     search(current.left, code + '0');\r\n//   }\r\n//   if (current.right !== null) {\r\n//     search(current.right, code + '1');\r\n//   }\r\n// }\r\n\r\n// search(root);\r\n\r\n// let result = '';\r\n// for (const letter of str) {\r\n//   result += table.get(letter);\r\n// }\r\n\r\n// const decodeTable = new Map;\r\n// for (const [letter, code] of table.entries()) {\r\n//   decodeTable.set(code, letter);\r\n// }\r\n\r\n// let decoded = '';\r\n// let temp = '';\r\n// for (let i = 0; i < result.length; i++) {\r\n//   temp += result[i];\r\n//   if (decodeTable.has(temp)) {\r\n//     decoded += decodeTable.get(temp);\r\n//     temp = '';\r\n//   }\r\n// }\r\n\r\n// console.log(table);\r\n// console.log(result);\r\n// console.log(decoded);\r\n\r\nclass Haffman {\r\n  // constructor(path) {\r\n  //   if (path) this.init(path)\r\n  // }\r\n\r\n  // init(path) {\r\n  //   const fs = require('fs')\r\n  //   this.str = fs.readFileSync(path, 'utf-8')\r\n  //   this.__makeFrequencyTable()\r\n  //   this.__makeTree()\r\n  //   this.__makeCodeTable()\r\n  //   this.__encode()\r\n  // }\r\n\r\n  static makeFrequencyTable(str) {\r\n    const entries = new Map()\r\n    for (let letter of str) {\r\n      if (!entries.has(letter)) {\r\n        entries.set(letter, 1)\r\n      } else {\r\n        entries.set(letter, entries.get(letter) + 1)\r\n      }\r\n    }\r\n    return Array.from(entries, (item) => ({\r\n      letter: item[0],\r\n      entries: item[1],\r\n      left: null,\r\n      right: null,\r\n    })).sort((item1, item2) => item2.entries - item1.entries)\r\n  }\r\n\r\n  static makeTree(frequencyTable) {\r\n    const entriesArr = Array.from(frequencyTable)\r\n    while (entriesArr.length > 1) {\r\n      const item1 = entriesArr.pop()\r\n      const item2 = entriesArr.pop()\r\n      entriesArr.push({\r\n        letter: null,\r\n        entries: item1.entries + item2.entries,\r\n        left: item2,\r\n        right: item1,\r\n      })\r\n      entriesArr.sort((item1, item2) => item2.entries - item1.entries)\r\n    }\r\n    return entriesArr[0]\r\n  }\r\n\r\n  static makeCodeTable(root) {\r\n    const table = new Map()\r\n    function search(current, code = '') {\r\n      if (current.letter) {\r\n        table.set(current.letter, code)\r\n      }\r\n      if (current.left !== null) {\r\n        search(current.left, code + '0')\r\n      }\r\n      if (current.right !== null) {\r\n        search(current.right, code + '1')\r\n      }\r\n    }\r\n    search(root)\r\n    return table\r\n  }\r\n\r\n  static encode(str, codeTable) {\r\n    let result = ''\r\n    for (const letter of str) {\r\n      result += codeTable.get(letter)\r\n    }\r\n    return result\r\n  }\r\n\r\n  save() {\r\n    const fs = require('fs')\r\n    fs.writeFileSync('./result.txt', this.result)\r\n    let codeTableStr = ''\r\n    for (const [letter, code] of this.codeTable.entries()) {\r\n      codeTableStr += letter + '::' + code + '\\n'\r\n    }\r\n    fs.writeFileSync('./codeTable.txt', codeTableStr)\r\n  }\r\n\r\n  static decode(codeTable, encodedStr) {\r\n    // const fs = require('fs')\r\n    // const str = fs.readFileSync(codeTableFile, 'utf-8')\r\n    // const arr = str.split('\\n')\r\n    // const map = new Map()\r\n    // for (const item of arr) {\r\n    //   const [letter, entries] = item.split('::')\r\n    //   if (letter === '') continue\r\n    //   map.set(letter, entries)\r\n    // }\r\n    //this.codeTable = map\r\n    const decodeTable = this.__makeDecodeTable(codeTable)\r\n    const encodedText = encodedStr\r\n    let decoded = ''\r\n    let temp = ''\r\n    for (let i = 0; i < encodedText.length; i++) {\r\n      temp += encodedText[i]\r\n      if (decodeTable.has(temp)) {\r\n        decoded += decodeTable.get(temp)\r\n        temp = ''\r\n      }\r\n    }\r\n    return { decoded, decodeTable }\r\n  }\r\n\r\n  static __makeDecodeTable(codeTable) {\r\n    const decodeTable = new Map()\r\n    for (const [letter, code] of codeTable.entries()) {\r\n      decodeTable.set(code, letter)\r\n    }\r\n    return decodeTable\r\n  }\r\n}\r\n\r\nexport { Haffman }\r\n\r\n// console.clear()\r\n\r\n// const path = './str.txt'\r\n// const haff = new Haffman(path)\r\n// console.log('encode: some text example: ', haff.result)\r\n\r\n// const codeTableFile = './codeTable.txt'\r\n// const encodedFile = './result.txt'\r\n// const decode = new Haffman()\r\n// decode.decode(codeTableFile, encodedFile)\r\n// console.log('decode: ', decode.str)\r\n","import React, { useState } from 'react'\r\nimport { Z } from '../scripts/3/1'\r\nimport { Haffman } from '../scripts/3/2'\r\n\r\nconst a = new Z()\r\n\r\nconst initForm = {\r\n  total: '',\r\n  buckets: '',\r\n}\r\n\r\nexport const Page3 = (prop) => {\r\n  const [form, setForm] = useState({ ...initForm })\r\n  const [result, setResult] = useState('')\r\n  const [str, setStr] = useState('')\r\n  const [hashResult, setHashResult] = useState('')\r\n  const onFormChangeHandler = (e) => {\r\n    setForm({ ...form, [e.target.name]: e.target.value })\r\n  }\r\n  const onCalcButtonClick = (e) => {\r\n    const buckets = form.buckets.split(' ').map((item) => +item)\r\n    a.setV(+form.total)\r\n    a.setBucketsV(...buckets)\r\n    let res = ''\r\n    for (const tuple of a.calc().entries()) {\r\n      res += `${tuple[0]} => ${tuple[1]}   `\r\n    }\r\n    setResult(res)\r\n  }\r\n  const onStrChange = (e) => {\r\n    setStr(e.target.value)\r\n  }\r\n  const onHashButtonClick = (e) => {\r\n    const frequencyTable = Haffman.makeFrequencyTable(str)\r\n    const treeRoot = Haffman.makeTree(frequencyTable)\r\n    const codeTable = Haffman.makeCodeTable(treeRoot)\r\n    const encoded = Haffman.encode(str, codeTable)\r\n    let frequencyTableStr = 'Результат кодирования: ' + encoded + '\\n'\r\n    frequencyTableStr += '\\n\\nТаблица частот:\\n'\r\n    for (const item of frequencyTable) {\r\n      frequencyTableStr += item.letter + ' => ' + item.entries + '\\n'\r\n    }\r\n    frequencyTableStr += '\\n\\n Таблица кодов: \\n'\r\n    for (const item of codeTable.entries()) {\r\n      frequencyTableStr += item[0] + ' => ' + item[1] + '\\n'\r\n    }\r\n    const { decoded, decodeTable } = Haffman.decode(codeTable, encoded)\r\n    frequencyTableStr += '\\n\\nТаблица декодирования: \\n'\r\n    for (const item of decodeTable.entries()) {\r\n      frequencyTableStr += item[0] + ' => ' + item[1] + '\\n'\r\n    }\r\n    frequencyTableStr += '\\n\\nРезультат декодирования: ' + decoded\r\n    setHashResult(frequencyTableStr)\r\n  }\r\n  return (\r\n    <div>\r\n      Общий объем\r\n      <input\r\n        value={form.total}\r\n        name='total'\r\n        onChange={onFormChangeHandler}\r\n        autoComplete='off'\r\n      />\r\n      Объем ведер\r\n      <input\r\n        value={form.buckets}\r\n        name='buckets'\r\n        onChange={onFormChangeHandler}\r\n        placeholder='v1 v2 v3...'\r\n        autoComplete='off'\r\n      />\r\n      <input type='button' value='Вычислить' onClick={onCalcButtonClick} />\r\n      {result ? '   Результат: ' + result : null}\r\n      <br />\r\n      <br />\r\n      Введите строку:{' '}\r\n      <input autoComplete='off' value={str} onChange={onStrChange} />\r\n      <input type='button' onClick={onHashButtonClick} value='Вычислить' />\r\n      <pre>{hashResult}</pre>\r\n    </div>\r\n  )\r\n}\r\n","const initial = [\r\n  [0, 3.22, 3.57, 4.12, 4, 4.85],\r\n  [0, 3.33, 4.87, 5.26, 7.34, 9.49],\r\n  [0, 4.27, 7.64, 10.25, 15.93, 16.12],\r\n]\r\n\r\nlet S = 5\r\nconst I = initial.length - 1\r\n\r\nconst last = initial[I]\r\n\r\nconst i2Best = []\r\n\r\nlet etap = 2\r\nfor (let i = 0; i < S; i++) {\r\n  const tmp = []\r\n  for (let j = 0; j < etap; j++) {\r\n    tmp.push(initial[1][j] + last[i - j + 1])\r\n  }\r\n  let best = 0\r\n  let bestI2 = -1\r\n  tmp.forEach((item, index) => {\r\n    if (item > best) {\r\n      best = item\r\n      bestI2 = index\r\n    }\r\n  })\r\n  i2Best.push({ item: best, index2: bestI2, index3: i - bestI2 + 1 })\r\n  etap++\r\n}\r\n\r\nconst i1 = i2Best.slice()\r\ni1.unshift({ item: 0, index2: 0, index3: 0 })\r\n\r\nfor (let i = 0; i < S + 1; i++) {\r\n  i1[S - i].item += initial[0][i]\r\n  i1[S - i].index1 = i\r\n}\r\n\r\ni1.sort((a, b) => b.item - a.item)\r\nconst result = i1[0]\r\n\r\nexport const calc = (matrix) => {\r\n  matrix = matrix.slice()\r\n  const I = 2\r\n  let S = 5\r\n  const last = matrix[I]\r\n  const i2Best = []\r\n  let etap = 2\r\n  for (let i = 0; i < S; i++) {\r\n    const tmp = []\r\n    for (let j = 0; j < etap; j++) {\r\n      tmp.push(matrix[1][j] + last[i - j + 1])\r\n    }\r\n    let best = 0\r\n    let bestI2 = -1\r\n    tmp.forEach((item, index) => {\r\n      if (item > best) {\r\n        best = item\r\n        bestI2 = index\r\n      }\r\n    })\r\n    i2Best.push({ item: best, index2: bestI2, index3: i - bestI2 + 1 })\r\n    etap++\r\n  }\r\n  const i1 = i2Best.slice()\r\n  i1.unshift({ item: 0, index2: 0, index3: 0 })\r\n  for (let i = 0; i < S + 1; i++) {\r\n    i1[S - i].item += matrix[0][i]\r\n    i1[S - i].index1 = i\r\n  }\r\n  i1.sort((a, b) => b.item - a.item)\r\n  const result = i1[0]\r\n  return [\r\n    matrix[0][result.index1],\r\n    matrix[1][result.index2],\r\n    matrix[2][result.index3],\r\n    result.item.toFixed(2),\r\n  ]\r\n}\r\n","import React, { useState } from 'react'\r\nimport { substr } from '../scripts/4/1'\r\nimport { calc } from '../scripts/4/2'\r\n\r\nconst initial = [\r\n  [0, 3.22, 3.57, 4.12, 4, 4.85],\r\n  [0, 3.33, 4.87, 5.26, 7.34, 9.49],\r\n  [0, 4.27, 7.64, 10.25, 15.93, 16.12],\r\n]\r\n\r\nexport const Page4 = (props) => {\r\n  const [str, setStr] = useState('')\r\n  const [result, setResult] = useState('')\r\n  const [values, setValues] = useState(initial)\r\n  const [result2, setResult2] = useState('')\r\n  const onCalcButtonClick = (e) => {\r\n    setResult(substr(str))\r\n  }\r\n  const onValueChange = (e) => {\r\n    const [i, j] = e.target.name.split('-')\r\n    setValues((values) => {\r\n      const arr = values.slice()\r\n      arr[i][j] = +e.target.value\r\n      return arr\r\n    })\r\n  }\r\n  const inputs = values.map((factory, id) => {\r\n    const els = factory.map((_, index) => {\r\n      return (\r\n        <input\r\n          key={index}\r\n          className={'col s1 ' + (index === 0 ? 'offset-s1' : '')}\r\n          name={id + '-' + index}\r\n          autoComplete='off'\r\n          value={values[id][index]}\r\n          onChange={onValueChange}\r\n        />\r\n      )\r\n    })\r\n    return (\r\n      <div className='row' key={id}>\r\n        <div className='col' key={id}>\r\n          Предприятие {id + 1}\r\n        </div>\r\n        {els}\r\n      </div>\r\n    )\r\n  })\r\n  const onCalcTableButtonClick = (e) => {\r\n    const res = calc(values)\r\n    const resStr =\r\n      'Лучшая стратегия инвестирования:\\n1ое предприятие: ' +\r\n      res[0] +\r\n      '\\n2ое предприятие: ' +\r\n      res[1] +\r\n      '\\n3е предприятие: ' +\r\n      res[2] +\r\n      '\\nОбщий результат: ' +\r\n      res[3]\r\n    setResult2(resStr)\r\n  }\r\n  return (\r\n    <div>\r\n      Введите посдовательность чисел:\r\n      <input\r\n        value={str}\r\n        onChange={(e) => setStr(e.target.value)}\r\n        autoComplete='off'\r\n      />\r\n      <input type='button' onClick={onCalcButtonClick} value='Вычислить' />\r\n      <div>{result}</div>\r\n      <br />\r\n      <br />\r\n      {inputs}\r\n      <input type='button' onClick={onCalcTableButtonClick} value='Вычислить' />\r\n      <pre>{result2}</pre>\r\n    </div>\r\n  )\r\n}\r\n","// const form = document.querySelector('form')\r\n\r\n// const input = document.querySelector('input')\r\n\r\n// const result = document.querySelector('span')\r\n\r\n// form.addEventListener('submit', (e) => {\r\n//   e.preventDefault()\r\n//   if (!input.value) {\r\n//     return\r\n//   }\r\n//   let arr = input.value.split(' ')\r\n//   arr = arr.map(number => +number)\r\n//   let count = 1\r\n//   let start = 0\r\n//   let max = 0\r\n//   let startMax = 0\r\n//   for (let i = 1; i < arr.length; i++) {\r\n//     if (arr[i] < arr[i - 1]) {\r\n//       count++\r\n//     } else {\r\n//       if (count > max) {\r\n//         max = count\r\n//         startMax = start\r\n//       }\r\n//       count = 1\r\n//       start = i\r\n//     }\r\n//   }\r\n//   if (count > max) {\r\n//     max = count\r\n//     startMax = start\r\n//   }\r\n//   result.innerText = `Самая долгая убывающая подстрока: ${arr.slice(startMax, startMax + max)}`\r\n// })\r\n\r\nexport function substr(str) {\r\n  str = str.trim()\r\n  let arr = str.split(' ')\r\n  arr = arr.map((number) => +number)\r\n  let count = 1\r\n  let start = 0\r\n  let max = 0\r\n  let startMax = 0\r\n  for (let i = 1; i < arr.length; i++) {\r\n    if (arr[i] < arr[i - 1]) {\r\n      count++\r\n    } else {\r\n      if (count > max) {\r\n        max = count\r\n        startMax = start\r\n      }\r\n      count = 1\r\n      start = i\r\n    }\r\n  }\r\n  if (count > max) {\r\n    max = count\r\n    startMax = start\r\n  }\r\n  return `Самая долгая убывающая подстрока: ${arr.slice(\r\n    startMax,\r\n    startMax + max\r\n  )}`\r\n}\r\n","import React, { useState } from 'react'\r\nimport { calc } from '../scripts/5/1'\r\nimport { Graph } from '../scripts/5/2'\r\n\r\nconst initialMatrix = [\r\n  [0, 7, 9, 0, 0, 14],\r\n  [7, 0, 10, 15, 0, 0],\r\n  [9, 10, 0, 11, 0, 2],\r\n  [0, 15, 11, 0, 6, 0],\r\n  [0, 0, 0, 6, 0, 9],\r\n  [14, 0, 2, 0, 9, 0],\r\n]\r\n\r\nconst g1 = new Graph(5)\r\n\r\nexport const Page5 = (props) => {\r\n  const [range, setRange] = useState(11)\r\n  const [matrix, setMatrix] = useState(initialMatrix)\r\n  const [result, setResult] = useState('')\r\n  const [verter, setVertex] = useState(0)\r\n  const [result2, setResult2] = useState('')\r\n  const [adj, setAdj] = useState('1 0, 0 2, 2 1, 0 3, 3 4')\r\n  const onMatrixInputChange = (e) => {\r\n    const [i, j] = e.target.name.split('-')\r\n    setMatrix((matrix) => {\r\n      const newMatrix = matrix.slice()\r\n      newMatrix[i][j] = +e.target.value\r\n      return newMatrix\r\n    })\r\n  }\r\n  const onRangeChange = (e) => {\r\n    setRange(+e.target.value)\r\n  }\r\n  const onCalcClick = (e) => {\r\n    setResult(calc(matrix.slice(), 0, range))\r\n  }\r\n  const onVertexChange = (e) => {\r\n    setVertex(+e.target.value)\r\n  }\r\n  const onCalc2Click = (e) => {\r\n    const adjs = adj.split(',')\r\n    for (const _adj of adjs) {\r\n      const [v1, v2] = _adj.trim().split(' ')\r\n      g1.addEdge(+v1, +v2)\r\n    }\r\n    setResult2('Список смежных вершин:\\n' + g1.printSCC())\r\n  }\r\n  const inputs = matrix.map((row, i) => {\r\n    const curRow = row.map((item, j) => {\r\n      return (\r\n        <input\r\n          value={item}\r\n          autoComplete='off'\r\n          onChange={onMatrixInputChange}\r\n          name={`${i}-${j}`}\r\n          className='col s2'\r\n          key={j}\r\n        />\r\n      )\r\n    })\r\n    return (\r\n      <div className='row' key={i}>\r\n        {curRow}\r\n      </div>\r\n    )\r\n  })\r\n  return (\r\n    <div>\r\n      <div className='row'>\r\n        <div className='row col s6'>{inputs}</div>\r\n        <div className='row col s6'>\r\n          Введите вершину:\r\n          <input value={verter} onChange={onVertexChange} autoComplete='off' />\r\n          Введите расстояние:\r\n          <input value={range} onChange={onRangeChange} autoComplete='off' />\r\n          <input type='button' value='Вычислить' onClick={onCalcClick} />\r\n          <pre>{result}</pre>\r\n        </div>\r\n      </div>\r\n      <div className='row'>Введите список смежных вершин (5):</div>\r\n      <input\r\n        value={adj}\r\n        onChange={(e) => setAdj(e.target.value)}\r\n        autoComplete='off'\r\n        placeholder='v1 v2, v1 v3, v3 v2 ...'\r\n      />\r\n      <input type='button' value='Вычислить' onClick={onCalc2Click} />\r\n      <pre>{result2}</pre>\r\n    </div>\r\n  )\r\n}\r\n","class Graph {\r\n  constructor(V) {\r\n    this.V = V\r\n    this.adj = new Array(V)\r\n    for (let i = 0; i < V; i++) {\r\n      this.adj[i] = []\r\n    }\r\n  }\r\n\r\n  addEdge(v, w) {\r\n    this.adj[v].push(w)\r\n  }\r\n\r\n  dfs(v, visited, callback) {\r\n    visited[v] = true\r\n    callback(v)\r\n    for (let i of this.adj[v]) {\r\n      if (!visited[i]) this.dfs(i, visited, callback)\r\n    }\r\n  }\r\n\r\n  getTranspose() {\r\n    const g = new Graph(this.V)\r\n    for (let v = 0; v < this.V; v++) {\r\n      for (let i = 0; i < this.adj[v].length; i++) {\r\n        g.adj[this.adj[v][i]].push(v)\r\n      }\r\n    }\r\n    return g\r\n  }\r\n\r\n  fillOrder(v, visited, stack) {\r\n    visited[v] = true\r\n    for (let i = 0; i < this.adj[v].length; i++) {\r\n      if (!visited[this.adj[v][i]]) {\r\n        this.fillOrder(this.adj[v][i], visited, stack)\r\n      }\r\n    }\r\n    stack.push(v)\r\n  }\r\n\r\n  printSCC() {\r\n    const stack = []\r\n    let result = ''\r\n    const visited = new Array(this.V).fill(false)\r\n    for (let i = 0; i < this.V; i++) {\r\n      if (!visited[i]) {\r\n        this.fillOrder(i, visited, stack)\r\n      }\r\n    }\r\n    const gt = this.getTranspose()\r\n    visited.fill(false)\r\n    while (stack.length) {\r\n      let v = stack.pop()\r\n      if (!visited[v]) {\r\n        gt.dfs(v, visited, (v) => (result += v + ' '))\r\n        result += '\\n'\r\n      }\r\n    }\r\n    return result\r\n  }\r\n}\r\n\r\n// const g = new Graph(5)\r\n// g.addEdge(1, 0)\r\n// g.addEdge(0, 2)\r\n// g.addEdge(2, 1)\r\n// g.addEdge(0, 3)\r\n// g.addEdge(3, 4)\r\n// console.log(g.adj)\r\n// g.printSCC()\r\n\r\nexport { Graph }\r\n","// const graph = [\r\n//   [0, 7, 9, 0, 0, 14],\r\n//   [7, 0, 10, 15, 0, 0],\r\n//   [9, 10, 0, 11, 0, 2],\r\n//   [0, 15, 11, 0, 6, 0],\r\n//   [0, 0, 0, 6, 0, 9],\r\n//   [14, 0, 2, 0, 9, 0],\r\n// ]\r\n\r\n// const SIZE = graph.length\r\n\r\n// console.log('Матрица смежности:', graph)\r\n\r\n// const beginIndex = 0\r\n// const range = 11\r\n\r\n// console.log('Range:', range)\r\n\r\n// const d = Array(SIZE).fill(Infinity)\r\n// const visited = Array(SIZE).fill(1)\r\n\r\n// let minIndex, min, temp\r\n\r\n// d[beginIndex] = 0\r\n\r\n// do {\r\n//   minIndex = Infinity\r\n//   min = Infinity\r\n//   for (let i = 0; i < SIZE; i++) {\r\n//     if (visited[i] === 1 && d[i] < min) {\r\n//       min = d[i]\r\n//       minIndex = i\r\n//     }\r\n//   }\r\n//   if (minIndex < Infinity) {\r\n//     for (let i = 0; i < SIZE; i++) {\r\n//       if (graph[minIndex][i] > 0) {\r\n//         temp = min + graph[minIndex][i]\r\n//         if (temp < d[i]) {\r\n//           d[i] = temp\r\n//         }\r\n//       }\r\n//     }\r\n//     visited[minIndex] = 0\r\n//   }\r\n// } while (minIndex < Infinity)\r\n\r\n// console.log('Растояние к каждой вершине', d)\r\n// let result = []\r\n// let result2 = []\r\n// d.forEach((item, index) => (item <= range ? result.push(index) : null))\r\n// d.forEach((item, index) => (item == range ? result2.push(index) : null))\r\n// console.log('Вершины в радиусе ' + range + ':', result)\r\n// console.log('Вершины на расстоянии ' + range + ':', result2)\r\n\r\nexport const calc = (matrix, beginIndex, range) => {\r\n  const d = Array(matrix.length).fill(Infinity)\r\n  const visited = Array(matrix.length).fill(1)\r\n\r\n  let minIndex, min, temp\r\n\r\n  d[beginIndex] = 0\r\n\r\n  do {\r\n    minIndex = Infinity\r\n    min = Infinity\r\n    for (let i = 0; i < matrix.length; i++) {\r\n      if (visited[i] === 1 && d[i] < min) {\r\n        min = d[i]\r\n        minIndex = i\r\n      }\r\n    }\r\n    if (minIndex < Infinity) {\r\n      for (let i = 0; i < matrix.length; i++) {\r\n        if (matrix[minIndex][i] > 0) {\r\n          temp = min + matrix[minIndex][i]\r\n          if (temp < d[i]) {\r\n            d[i] = temp\r\n          }\r\n        }\r\n      }\r\n      visited[minIndex] = 0\r\n    }\r\n  } while (minIndex < Infinity)\r\n  let result = []\r\n  let result2 = []\r\n  d.forEach((item, index) => (item <= range ? result.push(index) : null))\r\n  d.forEach((item, index) => (item == range ? result2.push(index) : null))\r\n  return 'Вершины в радиусе ' + range + ':' + result\r\n  console.log('Вершины на расстоянии ' + range + ':', result2)\r\n}\r\n","const rates = [\r\n  [1, 0.23, 0.25, 16.43, 18.21, 4.94],\r\n  [4.34, 1, 1.11, 71.4, 79.09, 21.44],\r\n  [3.93, 0.9, 1, 64.52, 71.48, 19.37],\r\n  [0.061, 0.014, 0.015, 1, 1.11, 0.3],\r\n  [0.055, 0.013, 0.014, 0.9, 1, 0.27],\r\n  [0.2, 0.047, 0.052, 3.33, 3.69, 1],\r\n]\r\n\r\nconst currencies = ['PLN', 'EUR', 'USD', 'RUB', 'INR', 'MXN']\r\n\r\nfunction negateLogarithmConvertor(matrix) {\r\n  return matrix.map((row) => row.map((item) => -Math.log(item)))\r\n}\r\n\r\nexport function arbitrage(ratesMatrix) {\r\n  const matrix = negateLogarithmConvertor(ratesMatrix)\r\n  let source = 0\r\n  const n = matrix.length\r\n  const minDist = new Array(n).fill(Infinity)\r\n  const pre = new Array(n).fill(-1)\r\n  minDist[source] = source\r\n  for (let _ = 0; _ < n - 1; _++) {\r\n    for (let sourceCurr = 0; sourceCurr < n; sourceCurr++) {\r\n      for (let destCurr = 0; destCurr < n; destCurr++) {\r\n        if (\r\n          minDist[destCurr] >\r\n          minDist[sourceCurr] + matrix[sourceCurr][destCurr]\r\n        ) {\r\n          minDist[destCurr] = minDist[sourceCurr] + matrix[sourceCurr][destCurr]\r\n          pre[destCurr] = sourceCurr\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  let result = ''\r\n\r\n  for (let sourceCurr = 0; sourceCurr < n; sourceCurr++) {\r\n    for (let destCurr = 0; destCurr < n; destCurr++) {\r\n      if (\r\n        minDist[destCurr] >\r\n        minDist[sourceCurr] + matrix[sourceCurr][destCurr]\r\n      ) {\r\n        let printCycle = [destCurr, sourceCurr]\r\n\r\n        while (!printCycle.includes(pre[sourceCurr])) {\r\n          printCycle.push(pre[sourceCurr])\r\n          sourceCurr = pre[sourceCurr]\r\n        }\r\n\r\n        printCycle.push(pre[sourceCurr])\r\n        printCycle.reverse()\r\n        result += printCycle.map((index) => currencies[index]).join(' => ')\r\n      }\r\n    }\r\n  }\r\n  return result\r\n}\r\n\r\n//arbitrage(currencies, rates)\r\n","import React, { useState } from 'react'\r\nimport { arbitrage } from '../scripts/6/1'\r\nimport { dijkstra, f, getData, path, _path } from './../scripts/6/2'\r\n\r\nconst initialRates = [\r\n  [1, 0.23, 0.25, 16.43, 18.21, 4.94],\r\n  [4.34, 1, 1.11, 71.4, 79.09, 21.44],\r\n  [3.93, 0.9, 1, 64.52, 71.48, 19.37],\r\n  [0.061, 0.014, 0.015, 1, 1.11, 0.3],\r\n  [0.055, 0.013, 0.014, 0.9, 1, 0.27],\r\n  [0.2, 0.047, 0.052, 3.33, 3.69, 1],\r\n]\r\n\r\nexport const Page6 = (props) => {\r\n  const [rates, setRates] = useState(initialRates)\r\n  const [matrix, setMatrix] = useState(getData())\r\n  const [matrix2, setMatrix2] = useState(getData())\r\n  const [result1, setResult1] = useState('')\r\n  const [result2, setResult2] = useState('')\r\n  const [result3, setResult3] = useState('')\r\n  const [start, setStart] = useState(0)\r\n  const [start2, setStart2] = useState(0)\r\n  const [end, setEnd] = useState(1)\r\n  const [end2, setEnd2] = useState(1)\r\n  const makeMatrix = (state, set) => {\r\n    return state.map((row, i) => {\r\n      const curRow = row.map((item, j) => {\r\n        const onInpChange = (e) =>\r\n          set((st) => {\r\n            const newState = st.slice()\r\n            newState[i][j] = +e.target.value\r\n            return newState\r\n          })\r\n        return (\r\n          <input\r\n            value={state[i][j]}\r\n            autoComplete='off'\r\n            onChange={onInpChange}\r\n            name={`${i}-${j}`}\r\n            className='col s2'\r\n            key={j}\r\n          />\r\n        )\r\n      })\r\n      return (\r\n        <div className='row' key={i}>\r\n          {curRow}\r\n        </div>\r\n      )\r\n    })\r\n  }\r\n  const inputs = makeMatrix(rates, setRates)\r\n  const calcArbitrage = (e) => {\r\n    setResult1(arbitrage(rates))\r\n  }\r\n  const inputs2 = makeMatrix(matrix, setMatrix)\r\n  const calcMatrix = (e) => {\r\n    const { distances, prevs } = dijkstra(matrix, start)\r\n    let res = distances.reduce(\r\n      (res, item) => res + ' ' + item,\r\n      'Дистанции до узлов: '\r\n    )\r\n    res = _path(prevs, end, start).reduce(\r\n      (calc, item) => calc + item + ' ',\r\n      res + '\\nПуть из узла ' + start + ' до узла ' + end + ': '\r\n    )\r\n    setResult2(res)\r\n  }\r\n\r\n  const inputs3 = makeMatrix(matrix2, setMatrix2)\r\n  const calcMatrix2 = (e) => {\r\n    const m2Copy = matrix2.slice().map((item) => item.slice())\r\n    const { matrix, path: __path } = f(m2Copy)\r\n    let res = 'Расстояние до улов:\\n'\r\n    let k = 0\r\n    for (const i of matrix) {\r\n      res += `Узел ${k++}: `\r\n      for (const j of i) {\r\n        res += j + ' '\r\n      }\r\n      res += '\\n'\r\n    }\r\n    res += `Путь из ${start2} в ${end2}:\\n`\r\n    const $path = path(__path, +start2, +end2)\r\n    for (const item of $path) {\r\n      res += item + ' '\r\n    }\r\n    setResult3(res)\r\n  }\r\n  return (\r\n    <div>\r\n      <div className='row'>\r\n        <div className='col s6'>\r\n          Список валют: PLN EUR USD RUB INR MXN\r\n          {inputs}\r\n        </div>\r\n        <div className='col s6'>\r\n          <input type='button' value='Вычислить' onClick={calcArbitrage} />\r\n          {result1}\r\n        </div>\r\n      </div>\r\n      <div className='row'>\r\n        <div className='col s6'>{inputs2}</div>\r\n        <div className='col s6'>\r\n          Введите номер вершины:\r\n          <input value={start} onChange={(e) => setStart(e.target.value)} />\r\n          Введите номер вершины 2:\r\n          <input value={end} onChange={(e) => setEnd(e.target.value)} />\r\n          <input type='button' value='Вычислить' onClick={calcMatrix} />\r\n          <br />\r\n          <pre>{result2}</pre>\r\n        </div>\r\n      </div>\r\n      <div className='row'>\r\n        <div className='col s6'>{inputs3}</div>\r\n        <div className='col s6'>\r\n          Введите номер вершины:\r\n          <input value={start2} onChange={(e) => setStart2(e.target.value)} />\r\n          Введите номер вершины 2:\r\n          <input value={end2} onChange={(e) => setEnd2(e.target.value)} />\r\n          <input type='button' value='Вычислить' onClick={calcMatrix2} />\r\n          <pre>{result3}</pre>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","const matrix = [\r\n  [0, 25, Infinity, Infinity, 17],\r\n  [25, 0, 10, Infinity, Infinity],\r\n  [Infinity, 10, 0, 5, 10],\r\n  [Infinity, Infinity, 5, 0, Infinity],\r\n  [17, Infinity, 10, 10, 0],\r\n]\r\n\r\nexport function getData() {\r\n  return [\r\n    [0, 25, Infinity, Infinity, 17],\r\n    [25, 0, 10, Infinity, Infinity],\r\n    [Infinity, 10, 0, 5, 10],\r\n    [Infinity, Infinity, 5, 0, Infinity],\r\n    [17, Infinity, 10, 10, 0],\r\n  ]\r\n}\r\n\r\nexport function f(matrix) {\r\n  // console.log('Map matrix:', matrix)\r\n  const v = matrix.length\r\n  const path = []\r\n  for (let i = 0; i < v; i++) {\r\n    path.push(new Array(v).fill(null))\r\n    for (let j = 0; j < v; j++) {\r\n      if (matrix[i][j] != Infinity) path[i][j] = j\r\n    }\r\n  }\r\n  for (let k = 0; k < v; k++) {\r\n    for (let i = 0; i < v; i++) {\r\n      for (let j = 0; j < v; j++) {\r\n        if (matrix[i][j] > matrix[i][k] + matrix[k][j]) {\r\n          matrix[i][j] = matrix[i][k] + matrix[k][j]\r\n          path[i][j] = path[i][k]\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return { matrix, path }\r\n}\r\n\r\nexport function path(path, u, v) {\r\n  if (path[u][v] === null) {\r\n    return []\r\n  }\r\n  const result = [u]\r\n  while (u !== v) {\r\n    u = path[u][v]\r\n    result.push(u)\r\n  }\r\n  return result\r\n}\r\n\r\n// const result = f(getData())\r\n// console.log('paths: ', result.path)\r\n// const start = 3;\r\n// const end = 0;\r\n// console.log(`path from ${start} to ${end}`, path(result.path, start, end))\r\n\r\nexport const dijkstra = function (graph, start) {\r\n  const v = graph.length\r\n  const distances = new Array(v).fill(Infinity)\r\n  distances[start] = 0\r\n  const prevs = new Array(v).fill(null)\r\n  prevs[start] = start\r\n  const visited = new Array(v).fill(false)\r\n\r\n  while (true) {\r\n    let shortestDistance = Infinity\r\n    let shortestIndex = -1\r\n    for (let i = 0; i < v; i++) {\r\n      if (distances[i] < shortestDistance && !visited[i]) {\r\n        shortestDistance = distances[i]\r\n        shortestIndex = i\r\n      }\r\n    }\r\n    if (shortestIndex === -1) {\r\n      return { distances, prevs }\r\n    }\r\n    for (let i = 0; i < v; i++) {\r\n      if (\r\n        graph[shortestIndex][i] !== 0 &&\r\n        distances[i] > distances[shortestIndex] + graph[shortestIndex][i]\r\n      ) {\r\n        distances[i] = distances[shortestIndex] + graph[shortestIndex][i]\r\n        prevs[i] = shortestIndex\r\n      }\r\n    }\r\n    visited[shortestIndex] = true\r\n  }\r\n}\r\n\r\nexport function _path(path, u, v) {\r\n  if (path[v] === null) {\r\n    return []\r\n  }\r\n  const result = [u]\r\n  while (u !== v) {\r\n    u = path[u]\r\n    result.push(u)\r\n  }\r\n  return result.reverse()\r\n}\r\n\r\n// const input = getData();\r\n// const start = 0\r\n// const end = 5\r\n// const result = dijkstra(input, start)\r\n// const result2 = _path(result.prevs, 5, 0)\r\n// console.log('mapMatrix:', input)\r\n// console.log('distances:', result.distances)\r\n// console.log(`path from ${start} to ${end}:`, result2)\r\n","import React from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport { Navbar } from './components/Navbar'\nimport { Page1 } from './components/Page1'\nimport { Page2 } from './components/Page2'\nimport { Page3 } from './components/Page3'\nimport { Page4 } from './components/Page4'\nimport { Page5 } from './components/Page5'\nimport { Page6 } from './components/Page6'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Navbar />\n      <div className='container'>\n        <Switch>\n          <Route path='/1' component={Page1} />\n          <Route path='/2' component={Page2} />\n          <Route path='/3' component={Page3} />\n          <Route path='/4' component={Page4} />\n          <Route path='/5' component={Page5} />\n          <Route path='/6' component={Page6} />\n          <Redirect to='/1' />\n        </Switch>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}